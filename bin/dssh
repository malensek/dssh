#!/usr/bin/env bash
################################################################################
#
# Copyright (c) 2015, Colorado State University
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# This software is provided by the copyright holders and contributors "as is"
# and any express or implied warranties, including, but not limited to, the
# implied warranties of merchantability and fitness for a particular purpose are
# disclaimed. In no event shall the copyright holder or contributors be liable
# for any direct, indirect, incidental, special, exemplary, or consequential
# damages (including, but not limited to, procurement of substitute goods or
# services; loss of use, data, or profits; or business interruption) however
# caused and on any theory of liability, whether in contract, strict liability,
# or tort (including negligence or otherwise) arising in any way out of the use
# of this software, even if advised of the possibility of such damage.
#
################################################################################
#
# dssh - Distributed ssh tool. Executes commands across multiple machines in
#        parallel via ssh.
#
#        Version: 0.9
#        Contact: Matthew Malensek (matt@malensek.net)
#
################################################################################

ssh_opts="-oBatchMode=yes \
          -oForwardX11=no \
          -oStrictHostkeyChecking=no"

unset color flock footer lockfile header host_list
abbrev=false
delay=0
live=false
parallel=false
quiet=false
active_threads=0
max_threads=0
host_list=""
hosts="${DSSH_HOSTS}"

cmd_normal="ssh_host"
cmd_live="ssh_live"
cmd="${cmd_normal}"

def_color=34
err_color=31

# Is there a flock utility we can use?
command -v flock &> /dev/null && flock=true

################################################################################

print_usage() {
cat <<EOM
Usage: $(basename ${0}) [-aAcpq] [-f host_file...] [-i id_file]
       [-l host_list...] [-o ssh_opts...] [-u username] [-s timeout]
       [-t max_threads] command

$(basename ${0}) runs 'command' on a number of hosts specified by any
combination of the following:
    * -f host_file: plain text file(s) with hostnames of machines.
    * -l host_list: list of hostnames given as the option operand
    * A plain text list of hosts from stdin.
    * Setting the DSSH_HOSTS environment variable.

Additional options:
    * -a                active printing of ssh output
    * -A                active printing with abbreviated hostnames
    * -c                enable colorized output
    * -d delay          sleep for 'delay' after each command execution
    * -i id_file        use an identity file for authentication
    * -j                job execution mode (alias for -Apy)
    * -o ssh_opt(s)     add options to the ssh command line
    * -p                execute remote commands in parallel (no thread limit)
    * -q                silence extra output (hostnames, newlines)
    * -u username       execute commands as 'username'
    * -s timeout        set how long to wait before timing out (in seconds)
    * -t num_threads    limit the number of parallel threads (implies -p)
    * -y                allocate PTY (enables screen-based apps and job control)

EOM
}

error_msg() {
    msg="dssh: ${@}"
    if [[ ${color} == true && -t 2 ]]; then
        msg=$'\e[0;'${err_color}'m'"${msg}"$'\e[0m'
    fi
    >&2 echo "${msg}"
}

error_die() {
    if [[ -n "${@}" ]]; then
        error_msg "${@}"
    fi
    print_usage
    exit 1
}

# Adds a file of hostnames to the host list
add_hostfile() {
    if [[ ! -e "${@}" || ! -f "${@}" ]]; then
        error_msg "File '${@}' could not be read."
        return 1
    fi

    hosts="${hosts} $(cat ${@} 2> /dev/null)"
}

# If dssh is terminated early, kill any remaining child processes
clean_children() {
    trap - SIGTERM SIGINT
    kill 0
}
trap clean_children SIGINT SIGTERM

thread_done() {
    (( active_threads-- ))
}
trap thread_done SIGUSR1

lock() {
    if [[ ${flock} == true ]]; then
        flock -x 40
        return 0
    fi

# perl implementation of Linux flock(1) command
perl <<EOM
    use Fcntl qw(:flock);
    open(FH, "<&=40");
    flock(FH,LOCK_EX);
EOM
}

ssh_host() {
    host=${1}
    shift 1

    output=$(ssh ${ssh_opts} ${host} ${@} 2>&1)
    exit_code=${?}

    # ssh defines exit code 255 as an error state
    [[ ${exit_code} -eq 255 ]] && error=true

    if [[ ${error} == true || ${quiet} == false ]]; then
        if [[ ${color} == true ]]; then
            c=${def_color}; [[ ${error} == true ]] && c=${err_color}
            host=$'\e[0;'${c}'m'"${host}"$'\e[0m'
        fi

        header="-- ${host} --"$'\n'
        footer=$'\n'
        output="${header}${output}${footer}"
    fi

    if [[ -n ${output} ]]; then
        output="${output}"$'\n'
    fi

    if [[ "${delay}" -gt 0 ]]; then
        sleep "${delay}"
    fi

    # acquire lock and print output
    ( lock; kill -s SIGUSR1 $$; echo -n "${output}" ) 40> "${lockfile}"
}

ssh_live() {
    host=${1}
    shift 1

    hname=""
    if [[ ${quiet} == false ]]; then
        # In abbreviated mode, everything after the first dot character '.' is
        # removed unless the hostname is an IP address
        if [[ ${abbrev} == true && "${host}" =~ [^0-9+.] ]]; then
            hname="${host%%.*}"
        else
            hname="${host}"
        fi

        if [[ ${color} == true ]]; then
            hname=$'\e[0;34m'"${hname}"$'\e[0m'
        fi

        hname="${hname} | "
    fi

    ssh ${ssh_opts} ${host} ${@} 2>&1 | while read line; do
        echo "${hname}${line}"
    done

    if [[ "${delay}" -gt 0 ]]; then
        sleep "${delay}"
    fi

    # notify our 'thread pool' that the next task can run
    ( lock; kill -s SIGUSR1 $$ ) 40> "${lockfile}"
}

while getopts "aAcd:f:i:jl:o:pqu:s:t:y" flag; do
    case ${flag} in
        a) cmd="${cmd_live}"; abbrev=false ;;
        A) cmd="${cmd_live}"; abbrev=true ;;
        c) color=true ;;
        d) delay=${OPTARG} ;;
        f) add_hostfile ${OPTARG} ;;
        i) ssh_opts="${ssh_opts} -i${OPTARG}" ;;
        j) cmd="${cmd_live}"; abbrev=true; \
            parallel=true; \
            ssh_opts="${ssh_opts} -t -t" ;;
        l) host_list="${host_list} ${OPTARG}" ;;
        o) ssh_opts="${ssh_opts} ${OPTARG}" ;;
        p) parallel=true; ;;
        q) quiet=true ;;
        u) ssh_opts="${ssh_opts} -l${OPTARG}" ;;
        s) ssh_opts="${ssh_opts} -oConnectTimeout=${OPTARG}" ;;
        t) parallel=true; max_threads=${OPTARG} ;;
        y) ssh_opts="${ssh_opts} -t -t" ;;
        ?) error_die ;;
    esac
done

shift $(($OPTIND - 1))

if [[ -z ${@} ]]; then
    error_die "No command specified!"
fi

if [[ ! "${max_threads}" =~ ^[0-9]+$ ]]; then
    error_die "Invalid number of threads: ${max_threads}"
fi

if [[ "${delay}" -gt 0 && ! "${delay}" =~ ^[.0-9][.a-zA-Z0-9]*$ ]]; then
    # Unfortunately, due to the variations in how sleep(1) is implemented across
    # platforms, this check may allow some invalid inputs to pass by.
    error_die "Invalid delay: ${delay}"
fi

if [[ ! -t 0 ]]; then
    # hosts were piped in
    hosts="${hosts} $(cat 2> /dev/null)"
fi

if [[ ! -t 1 ]]; then
    # our output is being piped somewhere; disable color
    color=false
fi

if [[ -z ${hosts} && -z ${host_list} ]]; then
    error_die "No hostnames specified!"
fi

hosts="${hosts} ${host_list}"

if [[ ${parallel} == false ]] ; then
    max_threads=1
fi

lockfile="${TMPDIR:-/tmp}/dssh.$$.$RANDOM.lock"
touch "${lockfile}"
trap 'rm -f ${lockfile}' EXIT

set -f # Temporarily disable pathname expansion
for host in ${hosts}; do
    if [[ "${host:0:1}" == "#" ]]; then
        if [[ ${quiet} == false ]]; then
            error_msg "Ignoring disabled host: ${host}"
        fi
        continue
    fi

    ${cmd} ${host} ${@} &

    (( active_threads++ ))
    if [[ ${active_threads} -eq ${max_threads} ]]; then
        wait
    fi
done
set +f

until wait; do :; done
